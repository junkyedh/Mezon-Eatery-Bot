import { ChannelMessage } from 'mezon-sdk';
import { Command } from '@app/decorators/command.decorator';
import { CommandMessage } from '@app/command/common/command.abstract';
import { TransactionService } from '@app/services/transaction.service';
import { UserService } from '@app/services/user.service';
import { formatToken } from '@app/utils/token-format';

@Command('deposit', {
  description: 'G·ª≠i token v√†o NCC Credit Pool',
  usage: '!deposit <amount>',
  category: 'NCC Credit',
  aliases: ['d', 'g·ª≠i'],
})
export class DepositCommand extends CommandMessage {
  constructor(
    private transactionService: TransactionService,
    private userService: UserService,
  ) {
    super();
  }

  async execute(args: string[], message: ChannelMessage) {
    const amount = parseInt(args[0] || '0');

    try {
      await this.userService.findOrCreateUser(
        message.sender_id,
        message.username || 'Unknown User',
      );

      const prettyAmount =
        amount > 0 ? `**${formatToken(amount)}** token ` : '';
      const messageContent =
        `üßæ **H∆∞·ªõng D·∫´n N·∫°p Token**` +
        `‚û°Ô∏è Chuy·ªÉn ${prettyAmount}tr·ª±c ti·∫øp cho bot qua Mezon transfer.\n` +
        `‚úÖ Bot nh·∫≠n ƒë∆∞·ª£c s·∫Ω c·∫≠p nh·∫≠t s·ªë d∆∞ c·ªßa b·∫°n.`;

      return this.replyMessageGenerate({ messageContent }, message);
    } catch (error) {
      const messageContent = `‚ùå **L·ªói:** ${error.message}`;
      return this.replyMessageGenerate({ messageContent }, message);
    }
  }
}
