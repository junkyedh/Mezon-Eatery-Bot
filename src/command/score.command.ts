import { ChannelMessage } from 'mezon-sdk';
import { Command } from '@app/decorators/command.decorator';
import { CommandMessage } from '@app/command/common/command.abstract';
import { UserService } from '@app/services/user.service';
import { LoanService } from '@app/services/loan.service';
import { formatToken } from '@app/utils/token-format';

@Command('score', {
  description: 'Ki·ªÉm tra NC Score v√† th√¥ng tin t√†i kho·∫£n',
  usage: '!score',
  category: 'NCC Credit',
  aliases: ['ncscore', 'ƒëi·ªÉm'],
})
export class ScoreCommand extends CommandMessage {
  constructor(
    private userService: UserService,
    private loanService: LoanService,
  ) {
    super();
  }

  async execute(args: string[], message: ChannelMessage) {
    try {
      // Find or create user
      const user = await this.userService.findOrCreateUser(
        message.sender_id,
        message.username || 'Unknown User',
      );
      const now = Date.now();
      const createdTime = user.createdAt
        ? new Date(user.createdAt).getTime()
        : now;
      const tenureYears = Math.max(
        (now - createdTime) / (365 * 24 * 60 * 60 * 1000),
        0,
      );
      const tenureDisplay =
        tenureYears < 1 ? '< 1 nƒÉm' : `${Math.floor(tenureYears)} nƒÉm`;

      const status = user.isBlocked ? 'üö´ **B·ªã kh√≥a**' : '‚úÖ **Ho·∫°t ƒë·ªông**';

      const baseCapacity = user.ncScore * 0.5;

      // Active loan & capacity left
      const activeLoan = await this.loanService.getActiveLoan(
        message.sender_id,
      );
      let activeLoanLines: string[] = [];
      let remainingCapacity = baseCapacity;
      if (activeLoan) {
        const acc = this.loanService.calculateAccruedInterest(activeLoan);
        const totalDue = activeLoan.amount + acc.interestAccrued;
        remainingCapacity = Math.max(baseCapacity - activeLoan.amount, 0);
        activeLoanLines = [
          'üìå Kho·∫£n vay ƒëang ho·∫°t ƒë·ªông:',
          `‚Ä¢ ID: ${activeLoan.id}`,
          `‚Ä¢ G·ªëc: ${formatToken(activeLoan.amount)}`,
          `‚Ä¢ L√£i t·∫°m t√≠nh: ${formatToken(acc.interestAccrued)} tokens`,
          `‚Ä¢ T·ªïng t·∫°m ph·∫£i tr·∫£: ${formatToken(totalDue)} tokens`,
          `‚Ä¢ ƒê√°o h·∫°n: ${activeLoan.dueDate.toLocaleDateString('vi-VN')} (c√≤n ${Math.max(acc.totalTermDays - acc.elapsedDays, 0)} ng√†y)`,
        ];
      }

      // Interest rate reference tiers
      const tiers = [
        'ÔøΩ Khung l√£i su·∫•t tham chi·∫øu / nƒÉm:',
        '‚Ä¢ Tu·∫ßn: 0.5%',
        '‚Ä¢ Th√°ng: 3.5%',
        '‚Ä¢ Qu√Ω: 3.8%',
        '‚Ä¢ NƒÉm: 4.85%',
        'L√£i th·ª±c t·∫ø t√≠nh pro‚Äërata theo s·ªë ng√†y vay.',
      ];

      const messageContent = [
        'üìä **NC Score Report**',
        `üë§ Ng∆∞·ªùi d√πng: ${user.username}`,
        `üéØ NC Score: ${formatToken(user.ncScore)} ƒëi·ªÉm`,
        `üí∞ S·ªë d∆∞: ${formatToken(user.balance)} tokens`,
        `üè¢ Vai tr√≤ (Role): ${user.jobLevel || 'Ch∆∞a c·∫≠p nh·∫≠t'}`,
        `‚è∞ Th√¢m ni√™n Mezon: ${tenureDisplay}`,
        `üìà H·∫°n m·ª©c vay c∆° s·ªü: ${formatToken(baseCapacity)} tokens`,
        ...(activeLoanLines.length
          ? activeLoanLines
          : ['üìå Kh√¥ng c√≥ kho·∫£n vay ƒëang ho·∫°t ƒë·ªông']),
        `üí≥ H·∫°n m·ª©c c√≤n l·∫°i kh·∫£ d·ª•ng: ${formatToken(remainingCapacity)} tokens`,
        `üîí Tr·∫°ng th√°i: ${status}`,
        '',
        ...tiers,
        '',
        'ÔøΩ D√πng !loan <sotien> <songay> ƒë·ªÉ t·∫°o y√™u c·∫ßu vay.',
      ].join('\n');

      return this.replyMessageGenerate({ messageContent }, message);
    } catch (error) {
      const messageContent = `‚ùå **L·ªói:** ${error.message}`;
      return this.replyMessageGenerate({ messageContent }, message);
    }
  }
}
